name: "Release & Publish"

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
      dry_run:
        description: 'Dry run (skip NPM publish)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  release:
    name: "Bump Version & Publish to NPM"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: 'develop'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Bump version
      id: version
      run: |
        cd packages/mcp-pty
        OLD_VERSION=$(node -p "require('./package.json').version")
        bun x --bun semver -i ${{ github.event.inputs.version_type }} $OLD_VERSION > new_version.txt
        NEW_VERSION=$(cat new_version.txt)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT

        # Update package.json
        node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json','utf8'));p.version='$NEW_VERSION';fs.writeFileSync('package.json',JSON.stringify(p,null,2)+'\n')"

    - name: Build & Test
      run: |
        cd packages/mcp-pty
        bun run check
        bun test
        bun run build

    - name: Generate CHANGELOG
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        bun x --bun git-cliff --unreleased --tag v${{ steps.version.outputs.new_version }} -o CHANGELOG.md

    - name: Create release branch
      id: release_branch
      run: |
        BRANCH_NAME="release/v${{ steps.version.outputs.new_version }}"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        git checkout -b "$BRANCH_NAME"

    - name: Commit version bump and CHANGELOG
      run: |
        git add packages/mcp-pty/package.json
        if [ -f CHANGELOG.md ]; then
          git add CHANGELOG.md
        fi
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

    - name: Create tag
      run: |
        git tag -d "v${{ steps.version.outputs.new_version }}" 2>/dev/null || true
        git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"

    - name: Publish to NPM
      id: npm_publish
      if: ${{ github.event.inputs.dry_run != 'true' }}
      continue-on-error: true
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd packages/mcp-pty
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        npm publish --access public

    - name: Rollback on NPM failure
      if: ${{ steps.npm_publish.outcome == 'failure' }}
      run: |
        git tag -d "v${{ steps.version.outputs.new_version }}"
        git reset --hard HEAD~1
        exit 1

    - name: Dry run - Skip NPM publish
      if: ${{ github.event.inputs.dry_run == 'true' }}
      run: |
        echo "🔍 Dry run mode - skipping NPM publish"
        echo "Would publish version ${{ steps.version.outputs.new_version }}"

    - name: Push release branch and tag
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        git push origin ${{ steps.release_branch.outputs.branch_name }}
        git push origin "v${{ steps.version.outputs.new_version }}"

    - name: Create PR to develop
      if: ${{ github.event.inputs.dry_run != 'true' }}
      id: pr_develop
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_URL=$(gh pr create \
          --base develop \
          --head ${{ steps.release_branch.outputs.branch_name }} \
          --title "chore: bump version to ${{ steps.version.outputs.new_version }}" \
          --body "Auto-generated version bump PR for v${{ steps.version.outputs.new_version }}")
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "pr_number=$(echo $PR_URL | grep -oE '[0-9]+$')" >> $GITHUB_OUTPUT
        echo "Created develop PR: $PR_URL"

    - name: Enable auto-merge for develop PR
      if: ${{ github.event.inputs.dry_run != 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr merge ${{ steps.pr_develop.outputs.pr_url }} --auto --squash --delete-branch=true

    - name: Wait for develop PR to merge
      if: ${{ github.event.inputs.dry_run != 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Waiting for PR #${{ steps.pr_develop.outputs.pr_number }} to merge..."
        for i in {1..60}; do
          STATE=$(gh pr view ${{ steps.pr_develop.outputs.pr_number }} --json state --jq .state)
          if [ "$STATE" = "MERGED" ]; then
            echo "✓ PR merged successfully"
            exit 0
          fi
          echo "Current state: $STATE (attempt $i/60)"
          sleep 10
        done
        echo "✗ Timeout waiting for PR merge"
        exit 1

    - name: Create PR from develop to main
      if: ${{ github.event.inputs.dry_run != 'true' }}
      id: pr_main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_URL=$(gh pr create \
          --base main \
          --head develop \
          --title "chore: release v${{ steps.version.outputs.new_version }}" \
          --body "Auto-generated release PR for v${{ steps.version.outputs.new_version }}" \
          --label "release")
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "Created main PR: $PR_URL"

    - name: Enable auto-merge for main PR
      if: ${{ github.event.inputs.dry_run != 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr merge ${{ steps.pr_main.outputs.pr_url }} --auto --squash --delete-branch=false

    - name: Create GitHub Release
      if: ${{ github.event.inputs.dry_run != 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ steps.version.outputs.new_version }} \
          --title "v${{ steps.version.outputs.new_version }}" \
          --generate-notes


